LDI $9		#Carrega o acumulador com o valor 9
STA @288	#Armazena o valor do acumulador em HEX0
STA @289	#Armazena o valor do acumulador em HEX1
STA @290	#Armazena o valor do acumulador em HEX2
STA @291	#Armazena o valor do acumulador em HEX3
STA @292	#Armazena o valor do acumulador em HEX4
STA @293	#Armazena o valor do acumulador em HEX5
NOP
LDI $0		#Carrega o acumulador com o valor 0
STA @256	#Armazena o valor do bit0 do acumulador no LDR0 ~ LEDR7
STA @257	#Armazena o valor do bit0 do acumulador no LDR8
STA @258	#Armazena o valor do bit0 do acumulador no LDR9
NOP
LDI $9		#Carrega o acumulador com o valor 9
STA @0		#Armazena o valor do acumulador em MEM[0] (unidades)
STA @1		#Armazena o valor do acumulador em MEM[1] (dezenas)
STA @2		#Armazena o valor do acumulador em MEM[2] (centenas)
STA @3		#Armazena o valor do acumulador em MEM[3] (milhares)
STA @4		#Armazena o valor do acumulador em MEM[4] (dezenas de milhares)
STA @5		#Armazena o valor do acumulador em MEM[5] (centenas de milhares)
STA @6		#Armazena o valor do acumulador em MEM[6] (flag inibir contagem)
NOP
STA @511	#Limpa a leitura do botão zero
STA @510	#Limpa a leitura do botão um
INICIO:
NOP		
LDA @352	#Carrega o acumulador com a leitura do botão KEY0
ANDi $1		#Utiliza a máscara b0000_0001 para limpar todos os bits menos o bit 0
CEQi $0		#Compara com constante 0
JEQ .NAO_CLICOU0	#Desvia se igual a 0 (botão não foi pressionado)
JSR .DECREMENTO	#O botão foi pressionado, chama a sub-rotina de incremento
NOP 		#Retorno da sub-rotina de incremento
NAO_CLICOU0:
JSR .SALVA_DISP #Escreve o valor das váriaveis de contagem nos displays
NOP		#Retorno da sub-rotina de salvar nos displays
LDA @356	#Carrega o acumulador com a leitura do botão FPGA_RESET
ANDi $1		#Utiliza a máscara b0000_0001 para limpar todos os bits menos o bit 0
CEQi $1		#Compara com constante 1
JEQ .REINICIO	#Desvia se igual a 1 (botão não foi pressionado)
JSR .RESET	#O botão foi pressionado, chama a sub-rotina de reset
REINICIO:
NOP		#Retorno da sub-rotina de reset
JMP .INICIO	#Fecha o laço principal, faz uma nova leitura de KEY0
NOP
DECREMENTO:
STA @511	#Limpa a leitura do botão
LDA @9		#Carrega o valor de MEM[6] (flag inibir contagem)
CEQi $0		#Compara o valor com constante 0
JEQ .DECREMENTAR
RET
DECREMENTAR:
LDA @0		#Carrega o valor de MEM[0] (contador)
SUBi $1		#SUBi com a constante 1
CEQi $0		#Compara o valor com constante 0
JEQ .VEMUM_D	#Realiza o carry out caso valor igual a 0
STA @0		#Salva o incremento em MEM[0] (contador)
RET		#Retorna da sub-rotina
VEMUM_D:
LDI $9		#Carrega 9 no acumulador
STA @0		#Armazena o valor do acumulador em MEM[0] (unidades)
LDA @1		#Carrega valor de MEM[1] no acumulador (dezenas)
SUBi $1		#SUBi com a constante 1
CEQi $0		#Compara o valor com constante 0
JEQ .VEMUM_C	#Realiza o carry out caso valor igual a 0
STA @1		#Salva o incremento em MEM[1] (dezenas)
RET
VEMUM_C:
LDI $9		#Carrega 9 no acumulador
STA @1		#Armazena o valor do acumulador em MEM[1] (dezenas)
LDA @2		#Carrega valor de MEM[2] no acumulador (centenas)
SUBi $1		#SUBi com a constante 1
CEQi $0		#Compara o valor com constante 0
JEQ .VEMUM_M	#Realiza o carry out caso valor igual a 0
STA @2		#Salva o incremento em MEM[2] (centenas)
RET
VEMUM_M:
LDI $9		#Carrega 9 no acumulador
STA @2		#Armazena o valor do acumulador em MEM[2] (centenas)
LDA @6		#Carrega valor de MEM[3] no acumulador (milhares)
SUBi $1		#SUBi com a constante 1
CEQi $0		#Compara o valor com constante 0
JEQ .VEMUM_DM	#Realiza o carry out caso valor igual a 0
STA @3		#Salva o incremento em MEM[3] (milhares)
RET
VEMUM_DM:
LDI $9		#Carrega 9 no acumulador
STA @3		#Armazena o valor do acumulador em MEM[3] (milhares)
LDA @7		#Carrega valor de MEM[4] no acumulador (dezenas de milhares)
SUBi $1		#SUBi com a constante 1
CEQi $0		#Compara o valor com constante 0
JEQ .VEMUM_CM	#Realiza o carry out caso valor igual a 0
STA @4		#Salva o incremento em MEM[4] (dezenas de milhares)
RET
VEMUM_CM:
LDI $9		#Carrega 9 no acumulador
STA @4		#Armazena o valor do acumulador em MEM[3] (milhares)
LDA @8		#Carrega valor de MEM[4] no acumulador (dezenas de milhares)
SUBi $1		#SUBi com a constante 1
STA @4		#Salva o incremento em MEM[4] (dezenas de milhares)
RET
SALVA_DISP:
LDA @0 		#Carrega o valor de MEM[0] (unidades)
STA @288 	#Armazena valor do acumulador de unidades no HEX0
LDA @1 		#Carrega o valor de MEM[1] (dezenas)
STA @289 	#Armazena valor do acumulador de dezenas no HEX1
LDA @2 		#Carrega o valor de MEM[2] (centenas)
STA @290 	#Armazena valor do acumulador de centenas no HEX2
LDA @6 		#Carrega o valor de MEM[3] (milhares)
STA @291 	#Armazena valor do acumulador de unidades no HEX3
LDA @7 		#Carrega o valor de MEM[4] (dezenas de milhares)
STA @292 	#Armazena valor do acumulador de dezenas no HEX4
LDA @8 		#Carrega o valor de MEM[5] (centenas de milhares)
STA @293 	#Armazena valor do acumulador de centenas no HEX5
RET
RESET:
LDI $9		#Carrega o acumulador com o valor 9
STA @0	 	#Armazena o valor do acumulador na MEM[0] (unidades)
STA @1	 	#Armazena o valor do acumulador na MEM[1] (dezenas)
STA @2	 	#Armazena o valor do acumulador na MEM[2] (centenas)
STA @3	 	#Armazena o valor do acumulador na MEM[3] (milhar)
STA @4	 	#Armazena o valor do acumulador na MEM[4] (dezena de milhar)
STA @5	 	#Armazena o valor do acumulador na MEM[5] (centena de milhar)
STA @6	 	#Armazena o valor do acumulador na MEM[6] (flag inibir contagem)~
LDI $1      #Carrega o acumulador com o valor 1
STA @257	#Armazena o valor do bit0 do acumulador no LDR8
RET