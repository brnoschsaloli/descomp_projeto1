LDI $0		#Carrega o acumulador com o valor 0
STA @288	#Armazena o valor do acumulador em HEX0
STA @289	#Armazena o valor do acumulador em HEX1
STA @290	#Armazena o valor do acumulador em HEX2
STA @291	#Armazena o valor do acumulador em HEX3
STA @292	#Armazena o valor do acumulador em HEX4
STA @293	#Armazena o valor do acumulador em HEX5
NOP
LDI $0		#Carrega o acumulador com o valor 0
STA @256	#Armazena o valor do bit0 do acumulador no LDR0 ~ LEDR7
STA @257	#Armazena o valor do bit0 do acumulador no LDR8
STA @258	#Armazena o valor do bit0 do acumulador no LDR9
NOP
LDI $0		#Carrega o acumulador com o valor 0
STA @0		#Armazena o valor do acumulador em MEM[0] (unidades)
STA @1		#Armazena o valor do acumulador em MEM[1] (dezenas)
STA @2		#Armazena o valor do acumulador em MEM[2] (centenas)
STA @6		#Armazena o valor do acumulador em MEM[6] (milhares)
STA @7		#Armazena o valor do acumulador em MEM[7] (dezenas de milhares)
STA @8		#Armazena o valor do acumulador em MEM[8] (centenas de milhares)
STA @9		#Armazena o valor do acumulador em MEM[9] (flag inibir contagem)
LDI $9		#Carrega o acumulador com o valor 9
STA @10		#Armazena o valor do acumulador em MEM[10] (inibir unidade)
STA @11		#Armazena o valor do acumulador em MEM[11] (inibir dezena)
STA @12		#Armazena o valor do acumulador em MEM[12] (inibir centena)
STA @13		#Armazena o valor do acumulador em MEM[13] (inibir milhar)
STA @14		#Armazena o valor do acumulador em MEM[14] (inibir dezena de milhar)
STA @15		#Armazena o valor do acumulador em MEM[15] (inibir centena de milhar)
LDI $0		#Carrega o acumulador com o valor 0
STA @3		#Armazena o valor do acumulador em MEM[3] (constante 0)
LDI $1		#Carrega o acumulador com o valor 1
STA @4		#Armazena o valor do acumulador em MEM[4] (constante 1)
LDI $10		#Carrega o acumulador com o valor 10
STA @5		#Armazena o valor do acumulador em MEM[5] (constante 10)
NOP
STA @511	#Limpa a leitura do botão zero
STA @510	#Limpa a leitura do botão um
INICIO:
NOP		
LDA @352	#Carrega o acumulador com a leitura do botão KEY0
ANDi $1		#Utiliza a máscara b0000_0001 para limpar todos os bits menos o bit 0
CEQi $0		#Compara com constante 0
JEQ .NAO_CLICOU0	#Desvia se igual a 0 (botão não foi pressionado)
JSR .INCREMENTO	#O botão foi pressionado, chama a sub-rotina de incremento
NOP 		#Retorno da sub-rotina de incremento
NAO_CLICOU0:
JSR .SALVA_DISP #Escreve o valor das váriaveis de contagem nos displays
NOP		#Retorno da sub-rotina de salvar nos displays
LDA @353	#Carrega o acumulador com a leitura do botão KEY1
ANDi $1		#Utiliza a máscara b0000_0001 para limpar todos os bits menos o bit 0
CEQi $0		#Compara com constante 0
JEQ .NAO_CLICOU1	#Desvia se igual a 0 (botão não foi pressionado)
JSR .DEFINE_LIM	#O botão foi pressionado, chama a sub-rotina de incremento
NOP 		#Retorno da sub-rotina de definir limite
NAO_CLICOU1:
JSR .VERIFICA_LIM
NOP		#Retorno da sub-rotina de verificar limite
LDA @356	#Carrega o acumulador com a leitura do botão FPGA_RESET
ANDi $1		#Utiliza a máscara b0000_0001 para limpar todos os bits menos o bit 0
CEQi $1		#Compara com constante 1
JEQ .REINICIO	#Desvia se igual a 1 (botão não foi pressionado)
JSR .RESET	#O botão foi pressionado, chama a sub-rotina de reset
REINICIO:
NOP		#Retorno da sub-rotina de reset
JMP .INICIO	#Fecha o laço principal, faz uma nova leitura de KEY0
NOP
INCREMENTO:
STA @511	#Limpa a leitura do botão
LDA @9		#Carrega o valor de MEM[9] (flag inibir contagem)
CEQi $0		#Compara o valor com constante 0
JEQ .INCREMENTAR
RET
INCREMENTAR:
LDA @0		#Carrega o valor de MEM[0] (contador)
ADDi $1		#ADDi com a constante 1
CEQi $10		#Compara o valor com constante 10
JEQ .VAIUM_D	#Realiza o carry out caso valor igual a 10
STA @0		#Salva o incremento em MEM[0] (contador)
RET		#Retorna da sub-rotina
VAIUM_D:
LDA @3		#Carrega valor de MEM[3] no acumulador (constante 0)
STA @0		#Armazena o valor do acumulador em MEM[0] (unidades)
LDA @1		#Carrega valor de MEM[1] no acumulador (dezenas)
ADDi $1		#ADDi com a constante 1
CEQi $10		#Compara o valor com constante 10
JEQ .VAIUM_C	#Realiza o carry out caso valor igual a 10
STA @1		#Salva o incremento em MEM[1] (dezenas)
RET
VAIUM_C:
LDA @3		#Carrega valor de MEM[3] no acumulador (constante 0)
STA @1		#Armazena o valor do acumulador em MEM[1] (dezenas)
LDA @2		#Carrega valor de MEM[2] no acumulador (centenas)
ADDi $1		#ADDi com a constante 1
CEQi $10		#Compara o valor com constante 10
JEQ .VAIUM_M	#Realiza o carry out caso valor igual a 10
STA @2		#Salva o incremento em MEM[2] (centenas)
RET
VAIUM_M:
LDA @3		#Carrega valor de MEM[3] no acumulador (constante 0)
STA @2		#Armazena o valor do acumulador em MEM[2] (centenas)
LDA @6		#Carrega valor de MEM[6] no acumulador (milhares)
ADDi $1		#ADDi com a constante 1
CEQi $10		#Compara o valor com constante 10
JEQ .VAIUM_DM	#Realiza o carry out caso valor igual a 10
STA @6		#Salva o incremento em MEM[6] (milhares)
RET
VAIUM_DM:
LDA @3		#Carrega valor de MEM[3] no acumulador (constante 0)
STA @6		#Armazena o valor do acumulador em MEM[6] (milhares)
LDA @7		#Carrega valor de MEM[7] no acumulador (dezenas de milhares)
ADDi $1		#ADDi com a constante 1
CEQi $10		#Compara o valor com constante 10
JEQ .VAIUM_CM	#Realiza o carry out caso valor igual a 10
STA @7		#Salva o incremento em MEM[7] (dezenas de milhares)
RET
VAIUM_CM:
LDA @3		#Carrega valor de MEM[3] no acumulador (constante 0)
STA @7		#Armazena o valor do acumulador em MEM[6] (milhares)
LDA @8		#Carrega valor de MEM[7] no acumulador (dezenas de milhares)
ADDi $1		#ADDi com a constante 1
STA @7		#Salva o incremento em MEM[7] (dezenas de milhares)
RET
SALVA_DISP:
LDA @0 		#Carrega o valor de MEM[0] (unidades)
STA @288 	#Armazena valor do acumulador de unidades no HEX0
LDA @1 		#Carrega o valor de MEM[1] (dezenas)
STA @289 	#Armazena valor do acumulador de dezenas no HEX1
LDA @2 		#Carrega o valor de MEM[2] (centenas)
STA @290 	#Armazena valor do acumulador de centenas no HEX2
LDA @6 		#Carrega o valor de MEM[6] (milhares)
STA @291 	#Armazena valor do acumulador de unidades no HEX3
LDA @7 		#Carrega o valor de MEM[7] (dezenas de milhares)
STA @292 	#Armazena valor do acumulador de dezenas no HEX4
LDA @8 		#Carrega o valor de MEM[8] (centenas de milhares)
STA @293 	#Armazena valor do acumulador de centenas no HEX5
RET
RESET:
LDI $0		#Carrega o acumulador com o valor 0
STA @0	 	#Armazena o valor do acumulador na MEM[0] (unidades)
STA @1	 	#Armazena o valor do acumulador na MEM[1] (dezenas)
STA @2	 	#Armazena o valor do acumulador na MEM[2] (centenas)
STA @6	 	#Armazena o valor do acumulador na MEM[6] (milhar)
STA @7	 	#Armazena o valor do acumulador na MEM[7] (dezena de milhar)
STA @8	 	#Armazena o valor do acumulador na MEM[8] (centena de milhar)
STA @9	 	#Armazena o valor do acumulador na MEM[9] (flag inibir contagem)
STA @257	#Armazena o valor do bit0 do acumulador no LDR8
RET
VERIFICA_LIM:
LDA @0		#Carrega o valor de MEM[0] (unidades)
CEQ @10		#Compara o valor de MEM[10] (inibir unidade)
JEQ .NEXT_LIM1
RET
NEXT_LIM1:
LDA @1		#Carrega o valor de MEM[1] (dezenas)
CEQ @11		#Compara o valor de MEM[11] (inibir dezenas)
JEQ .NEXT_LIM2
RET
NEXT_LIM2:
LDA @2		#Carrega o valor de MEM[2] (centenas)
CEQ @12		#Compara o valor de MEM[12] (inibir centenas)
JEQ .NEXT_LIM3
RET
NEXT_LIM3:
LDA @6		#Carrega o valor de MEM[6] (milhar)
CEQ @13		#Compara o valor de MEM[13] (inibir milhar)
JEQ .NEXT_LIM4
RET
NEXT_LIM4:
LDA @7		#Carrega o valor de MEM[7] (dezena de milhar)
CEQ @14		#Compara o valor de MEM[10] (inibir dezena de milhar)
JEQ .NEXT_LIM5
RET
NEXT_LIM5:
LDA @8		#Carrega o valor de MEM[8] (centena de milhar)
CEQ @15		#Compara o valor de MEM[10] (inibir centena de milhar)
JEQ .TODOS_IGUAL
RET
TODOS_IGUAL:
LDI $1		#Carrega o acumulador com o valor 1
STA @9		#Armazena o valor do acumulador em MEM[9] (flag inibir contagem)
STA @257	#Armazena o valor do bit0 do acumulador no LDR8
RET
DEFINE_LIM:
STA @510	#Limpa a leitura do botão um
LDA @320	#Carrega o acumulador com a leitura do SW7TO0
STA @10		#Armazena o valor do acumulador em MEM[10] (inibir unidade)
LDI $4		#Carrega o acumulador com o valor 4
STA @256	#Armazena o valor do bit0 do acumulador no LDR0 ~ LEDR7
AGUARDA_D:
LDA @353	#Carrega o acumulador com a leitura do botão KEY1
ANDi $1		#Utiliza a máscara b0000_0001 para limpar todos os bits menos o bit 0
CEQi $0		#Compara com constante 0
JEQ .AGUARDA_D	#Desvia se igual a 0 (botão não foi pressionado)
STA @510	#Limpa a leitura do botão um
LDA @320	#Carrega o acumulador com a leitura do SW7TO0
STA @11		#Armazena o valor do acumulador em MEM[11] (inibir dezena)
LDI $16		#Carrega o acumulador com o valor 16
STA @256	#Armazena o valor do bit0 do acumulador no LDR0 ~ LEDR7
AGUARDA_C:
LDA @353	#Carrega o acumulador com a leitura do botão KEY1
ANDi $1		#Utiliza a máscara b0000_0001 para limpar todos os bits menos o bit 0
CEQi $0		#Compara com constante 0
JEQ .AGUARDA_C	#Desvia se igual a 0 (botão não foi pressionado)
STA @510	#Limpa a leitura do botão um
LDA @320	#Carrega o acumulador com a leitura do SW7TO0
STA @12		#Armazena o valor do acumulador em MEM[12] (inibir centena)
LDI $32		#Carrega o acumulador com o valor 32
STA @256	#Armazena o valor do bit0 do acumulador no LDR0 ~ LEDR7
AGUARDA_M:
LDA @353	#Carrega o acumulador com a leitura do botão KEY1
ANDi $1		#Utiliza a máscara b0000_0001 para limpar todos os bits menos o bit 0
CEQi $0		#Compara com constante 0
JEQ .AGUARDA_M	#Desvia se igual a 0 (botão não foi pressionado)
STA @510	#Limpa a leitura do botão um
LDA @320	#Carrega o acumulador com a leitura do SW7TO0
STA @13		#Armazena o valor do acumulador em MEM[13] (inibir milhar)
LDI $128	#Carrega o acumulador com o valor 128
STA @256	#Armazena o valor do bit0 do acumulador no LDR0 ~ LEDR7
AGUARDA_DM:
LDA @353	#Carrega o acumulador com a leitura do botão KEY1
ANDi $1		#Utiliza a máscara b0000_0001 para limpar todos os bits menos o bit 0
CEQi $0		#Compara com constante 0
JEQ .AGUARDA_DM	#Desvia se igual a 0 (botão não foi pressionado)
STA @510	#Limpa a leitura do botão um
LDA @320	#Carrega o acumulador com a leitura do SW7TO0
STA @14		#Armazena o valor do acumulador em MEM[13] (inibir dezena de milhar)
LDI $0		#Carrega o acumulador com o valor 0
STA @256	#Armazena o valor do bit0 do acumulador no LDR0 ~ LEDR7
LDI $1		#Carrega o acumulador com o valor 1
STA @258	#Armazena o valor do bit0 do acumulador no LDR9
AGUARDA_CM:
LDA @353	#Carrega o acumulador com a leitura do botão KEY1
ANDi $1		#Utiliza a máscara b0000_0001 para limpar todos os bits menos o bit 0
CEQi $0		#Compara com constante 0
JEQ .AGUARDA_CM	#Desvia se igual a 0 (botão não foi pressionado)
STA @510	#Limpa a leitura do botão um
LDA @320	#Carrega o acumulador com a leitura do SW7TO0
STA @15		#Armazena o valor do acumulador em MEM[15] (inibir centena de milhar)
LDI $0		#Carrega o acumulador com o valor 0
STA @258	#Armazena o valor do bit0 do acumulador no LDR9
RET
