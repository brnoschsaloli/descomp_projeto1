library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

component bancoRegistradores is
  generic
  (
		larguraDados        : natural := 8;
		larguraEndBancoRegs : natural := 5
  );
-- Leitura de 2 registradores e escrita em 1 registrador simultaneamente.
  port
  (
		clk        : in std_logic;

		enderecoA       : in std_logic_vector((larguraEndBancoRegs-1) downto 0);
		enderecoB       : in std_logic_vector((larguraEndBancoRegs-1) downto 0);
		enderecoC       : in std_logic_vector((larguraEndBancoRegs-1) downto 0);

		dadoEscritaC    : in std_logic_vector((larguraDados-1) downto 0);

		escreveC          : in std_logic;
		saidaA          : out std_logic_vector((larguraDados -1) downto 0);
		saidaB          : out std_logic_vector((larguraDados -1) downto 0)
  );
end component bancoRegistradores;


architecture arch_name of entity_name is

  -- Declarations (optional):
  -- signal <name> : std_logic;
  -- signal <name> : std_logic_vector(<msb_index> downto <lsb_index>);
  -- constant FUNCT_WIDTH : natural := 6;
  -- subtype funct_t  is  std_logic_vector(FUNCT_WIDTH-1 downto 0);
  -- constant functADD   : funct_t := "100000";
  -- constant functSUB   : funct_t := "100010";
  -- alias memWRsignal: std_logic is controlWord(0);
  -- alias ulaOPvalue:  std_logic_vector(1 downto 0) is controlWord(5 downto 4);

begin

  -- Para instanciar, a atribuição de sinais (e generics) segue a ordem: (nomeSinalArquivoDefinicaoComponente => nomeSinalNesteArquivo)
  -- regA:  entity work.nome_do_componente generic map (DATA_WIDTH => DATA_WIDTH)
  --        port map (dataIN => dataIN, dataOUT =>  RegAmuxA, enable =>  habRegA, clk =>  clk, rst => rst);

end architecture;