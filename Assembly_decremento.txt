LDI $9		#Carrega o acumulador com o valor 9
STA @288	#Armazena o valor do acumulador em HEX0
STA @289	#Armazena o valor do acumulador em HEX1
STA @290	#Armazena o valor do acumulador em HEX2
STA @291	#Armazena o valor do acumulador em HEX3
STA @292	#Armazena o valor do acumulador em HEX4
STA @293	#Armazena o valor do acumulador em HEX5
NOP
LDI $0		#Carrega o acumulador com o valor 0
STA @256	#Armazena o valor do bit0 do acumulador no LDR0 ~ LEDR7
STA @257	#Armazena o valor do bit0 do acumulador no LDR8
STA @258	#Armazena o valor do bit0 do acumulador no LDR9
NOP
LDI $9		#Carrega o acumulador com o valor 9
STA @0		#Armazena o valor do acumulador em MEM[0] (unidades)
STA @1		#Armazena o valor do acumulador em MEM[1] (dezenas)
STA @2		#Armazena o valor do acumulador em MEM[2] (centenas)
STA @3		#Armazena o valor do acumulador em MEM[3] (milhares)
STA @4		#Armazena o valor do acumulador em MEM[4] (dezenas de milhares)
STA @5		#Armazena o valor do acumulador em MEM[5] (centenas de milhares)
NOP
STA @511	#Limpa a leitura do botão zero
STA @510	#Limpa a leitura do botão um
INICIO:
NOP		
LDA @352	#Carrega o acumulador com a leitura do botão KEY0
ANDi $1		#Utiliza a máscara b0000_0001 para limpar todos os bits menos o bit 0
CEQi $0		#Compara com constante 0
JEQ .NAO_CLICOU0	#Desvia se igual a 0 (botão não foi pressionado)
JSR .DECREMENTO	#O botão foi pressionado, chama a sub-rotina de incremento
NOP 		#Retorno da sub-rotina de incremento
NAO_CLICOU0:
JSR .SALVA_DISP #Escreve o valor das váriaveis de contagem nos displays
NOP		#Retorno da sub-rotina de salvar nos displays
LDA @356	#Carrega o acumulador com a leitura do botão FPGA_RESET
ANDi $1		#Utiliza a máscara b0000_0001 para limpar todos os bits menos o bit 0
CEQi $1		#Compara com constante 1
JEQ .REINICIO	#Desvia se igual a 1 (botão não foi pressionado)
JSR .RESET	#O botão foi pressionado, chama a sub-rotina de reset
REINICIO:
NOP		#Retorno da sub-rotina de reset
JMP .INICIO	#Fecha o laço principal, faz uma nova leitura de KEY0
NOP
DECREMENTO:
STA @511	#Limpa a leitura do botão
JMP .DECREMENTAR
RET
DECREMENTAR:
LDA @0          # Carrega MEM[0] (unidades) no acumulador
CEQi $0         # Verifica se MEM[0] == 0
JEQ .VEMUM_D    # Se MEM[0] == 0, realiza o "empréstimo"  
SUBi $1         # Subtrai 1 de MEM[0]
STA @0          # Armazena o novo valor de MEM[0]
RET             # Retorna da sub-rotina
VEMUM_D:
LDI $9          # Carrega 9 no acumulador
STA @0          # Define MEM[0] para 9
LDA @1          # Carrega MEM[1] (dezenas) no acumulador
CEQi $0         # Verifica se MEM[1] == 0
JEQ .VEMUM_C    # Se MEM[1] == 0, realiza o próximo "empréstimo"
SUBi $1         # Subtrai 1 de MEM[1]
STA @1          # Armazena o novo valor de MEM[1]
RET             # Retorna da sub-rotina
VEMUM_C:
LDI $9          # Carrega 9 no acumulador
STA @1          # Define MEM[1] para 9
LDA @2          # Carrega MEM[2] (centenas) no acumulador
CEQi $0         # Verifica se MEM[2] == 0
JEQ .VEMUM_M    # Se MEM[2] == 0, realiza o próximo "empréstimo"
SUBi $1         # Subtrai 1 de MEM[2]
STA @2          # Armazena o novo valor de MEM[2]
RET             # Retorna da sub-rotina
VEMUM_M:
LDI $9          # Carrega 9 no acumulador
STA @2          # Define MEM[2] para 9
LDA @3          # Carrega MEM[3] (milhares) no acumulador
CEQi $0         # Verifica se MEM[3] == 0
JEQ .VEMUM_DM   # Se MEM[3] == 0, realiza o próximo "empréstimo"
SUBi $1         # Subtrai 1 de MEM[3]
STA @3          # Armazena o novo valor de MEM[3]
RET             # Retorna da sub-rotina
VEMUM_DM:
LDI $9          # Carrega 9 no acumulador
STA @3          # Define MEM[3] para 9
LDA @4          # Carrega MEM[4] (dezenas de milhares) no acumulador
CEQi $0         # Verifica se MEM[4] == 0
JEQ .VEMUM_CM   # Se MEM[4] == 0, realiza o próximo "empréstimo"
SUBi $1         # Subtrai 1 de MEM[4]
STA @4          # Armazena o novo valor de MEM[4]
RET             # Retorna da sub-rotina
VEMUM_CM:
LDI $9          # Carrega 9 no acumulador
STA @4          # Define MEM[4] para 9
LDA @5          # Carrega MEM[5] (centenas de milhares) no acumulador
SUBi $1         # Subtrai 1 de MEM[5]
STA @5          # Armazena o novo valor de MEM[5]
RET             # Retorna da sub-rotina
SALVA_DISP:
LDA @0 		#Carrega o valor de MEM[0] (unidades)
STA @288 	#Armazena valor do acumulador de unidades no HEX0
LDA @1 		#Carrega o valor de MEM[1] (dezenas)
STA @289 	#Armazena valor do acumulador de dezenas no HEX1
LDA @2 		#Carrega o valor de MEM[2] (centenas)
STA @290 	#Armazena valor do acumulador de centenas no HEX2
LDA @3 		#Carrega o valor de MEM[3] (milhares)
STA @291 	#Armazena valor do acumulador de unidades no HEX3
LDA @4 		#Carrega o valor de MEM[4] (dezenas de milhares)
STA @292 	#Armazena valor do acumulador de dezenas no HEX4
LDA @5 		#Carrega o valor de MEM[5] (centenas de milhares)
STA @293 	#Armazena valor do acumulador de centenas no HEX5
RET
RESET:
LDI $9		#Carrega o acumulador com o valor 9
STA @0	 	#Armazena o valor do acumulador na MEM[0] (unidades)
STA @1	 	#Armazena o valor do acumulador na MEM[1] (dezenas)
STA @2	 	#Armazena o valor do acumulador na MEM[2] (centenas)
STA @3	 	#Armazena o valor do acumulador na MEM[3] (milhar)
STA @4	 	#Armazena o valor do acumulador na MEM[4] (dezena de milhar)
STA @5	 	#Armazena o valor do acumulador na MEM[5] (centena de milhar)
LDI $0          #Carrega o acumulador com o valor 1
STA @257	#Armazena o valor do bit0 do acumulador no LDR8
RET
